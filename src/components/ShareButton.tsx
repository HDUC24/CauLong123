import React from "react";
import { TouchableOpacity, Text, StyleSheet, Share, View } from "react-native";
import Ionicons from "@expo/vector-icons/Ionicons";
import { Session } from "../models/types";
import { formatCurrency } from "../utils/expenseUtils";
import { format } from "date-fns";

type ShareButtonProps = {
  session: Session;
  calculatedExpenses: {
    totalAmount: number;
    splitByPlayer: Record<string, number>;
  };
};

const ShareButton = ({ session, calculatedExpenses }: ShareButtonProps) => {
  const handleShare = async () => {
    try {
      // Chu·∫©n b·ªã n·ªôi dung tin nh·∫Øn
      const date = format(new Date(session.date), "dd/MM/yyyy");
      const time = format(new Date(session.date), "HH:mm");

      let message = `üìã B√ÅO C√ÅO CHI PH√ç C·∫¶U L√îNG\n\n`;
      message += `üóìÔ∏è Ng√†y: ${date}\n`;
      message += `üïí Gi·ªù: ${time}\n`;
      message += `üìç ƒê·ªãa ƒëi·ªÉm: ${session.location}\n`;
      message += `üë• S·ªë ng∆∞·ªùi tham gia: ${session.players.length} ng∆∞·ªùi\n`;

      if (session.notes) {
        message += `üìù Ghi ch√∫: ${session.notes}\n`;
      }

      message += `\n----------------------\n\n`;

      // Th√™m danh s√°ch chi ti·∫øt chi ph√≠
      message += `üßæ CHI TI·∫æT C√ÅC KHO·∫¢N CHI:\n\n`;
      session.expenses.forEach((expense, index) => {
        const expenseType = getExpenseTypeLabel(expense.type);
        message += `${index + 1}. ${expenseType}: ${formatCurrency(
          expense.amount
        )}`;
        if (expense.description) {
          message += ` (${expense.description})`;
        }

        // Th√™m th√¥ng tin v·ªÅ ng∆∞·ªùi chia s·∫ª chi ph√≠ n√†y
        if (
          expense.divideAmong &&
          expense.divideAmong.length > 0 &&
          expense.divideAmong.length < session.players.length
        ) {
          const playerNames = expense.divideAmong
            .map((id) => session.players.find((p) => p.id === id)?.name || "")
            .filter((name) => name)
            .join(", ");
          message += `\n   ‚Üí Chia cho: ${playerNames}`;
        }

        message += "\n\n";
      });

      message += `----------------------\n\n`;
      message += `üí∞ T·ªîNG CHI PH√ç: ${formatCurrency(
        calculatedExpenses.totalAmount
      )}\n\n`;

      // Th√™m chi ph√≠ m·ªói ng∆∞·ªùi c·∫ßn tr·∫£
      message += `üí∏ CHI PH√ç M·ªñI NG∆Ø·ªúI:\n\n`;

      // S·∫Øp x·∫øp theo t√™n ng∆∞·ªùi ch∆°i
      const sortedPlayers = [...session.players].sort((a, b) =>
        a.name.localeCompare(b.name)
      );

      sortedPlayers.forEach((player) => {
        const amount = calculatedExpenses.splitByPlayer[player.id] || 0;
        message += `‚Ä¢ ${player.name}: ${formatCurrency(amount)}\n`;
      });

      // Chia s·∫ª tin nh·∫Øn
      await Share.share({
        message,
        title: `Chi ph√≠ ƒë√°nh c·∫ßu l√¥ng ng√†y ${date}`,
      });
    } catch (error) {
      console.error("L·ªói khi chia s·∫ª:", error);
    }
  };

  // H√†m l·∫•y t√™n lo·∫°i chi ph√≠
  const getExpenseTypeLabel = (type: string): string => {
    switch (type) {
      case "court_fee":
        return "Ti·ªÅn s√¢n";
      case "shuttle":
        return "Ti·ªÅn c·∫ßu";
      case "drink":
        return "Ti·ªÅn n∆∞·ªõc";
      case "equipment":
        return "Ti·ªÅn ph·ª• ki·ªán";
      case "other":
        return "Chi ph√≠ kh√°c";
      default:
        return "Chi ph√≠";
    }
  };

  return (
    <TouchableOpacity style={styles.shareButton} onPress={handleShare}>
      <Ionicons name="share-social-outline" size={20} color="white" />
      <Text style={styles.shareText}>Chia s·∫ª chi ph√≠</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  shareButton: {
    backgroundColor: "#2196f3",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    marginVertical: 8,
  },
  shareText: {
    color: "white",
    fontWeight: "bold",
    fontSize: 16,
    marginLeft: 8,
  },
});

export default ShareButton;
